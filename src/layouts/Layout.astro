---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Mastermind Battle Online",
  description = "Juego de Mastermind en l√≠nea con tablero privado",
} = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="#3b82f6" />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="mobile-web-app-capable" content="yes" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <script>
      const sun = document.querySelector(".sun-icon");
      const moon = document.querySelector(".moon-icon");
      const theme = (() => {
        const fromStorage = localStorage.getItem("theme");
        if (fromStorage) {
          fromStorage === "dark"
            ? sun?.classList.add("hidden")
            : moon?.classList.add("hidden");
          return fromStorage;
        }
        const isDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        isDark ? sun?.classList.add("hidden") : moon?.classList.add("hidden");
        return isDark ? "dark" : "light";
      })();

      document.documentElement?.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);
    </script>
  </head>
  <body>
    <div class="container">
      <Header />
      <main>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style is:global>
  :root {
    /* Light theme (default) */
    --primary-color: #3b82f6;
    --secondary-color: #1e40af;
    --background-color: #f9fafb;
    --default-color: #1f2937;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-400: #9ca3af;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --card-shadow: 0 0 2px 2px rgba(0 0 0 / 0.1);
    --danger-color: #fb4040;
  }

  /* Dark theme */
  [data-theme="dark"] {
    --primary-color: #60a5fa;
    --secondary-color: #3b82f6;
    --background-color: #111827;
    --default-color: #f9fafb;
    --gray-100: #1f2937;
    --gray-200: #374151;
    --gray-400: #6b7280;
    --gray-600: #d1d5db;
    --gray-700: #9ca3af;
    --card-shadow: 0 0 2px 2px rgba(255 255 255 / 0.1);
    --danger-color: #f87171;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  button {
    border: none;
    outline: none;
    background-color: transparent;
  }

  .btn-primary {
    background-color: var(--primary-color);
    border-radius: 0.375rem;
    color: white;
    padding: 0.5rem 1rem;
    transition: background-color 0.2s ease;

    &:hover {
      background-color: var(--secondary-color);
    }
  }

  ul {
    list-style: none;
  }
</style>

<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
      Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
    background-color: var(--background-color);
    color: var(--default-color);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    transition:
      background-color 0.2s,
      color 0.2s;
  }

  .container {
    flex: 1;
    display: flex;
    flex-direction: column;
    max-width: 1200px;
    margin-inline: auto;
    padding-inline: 1rem;
    width: 100%;
  }

  main {
    flex: 1;
  }
</style>
